local prefab_character = nil
local prefab_vase = nil
local ids = {}
local vase_ids ={}
function init(self)
	prefab_character = gui.get_node("actor_prefab")
	prefab_vase = gui.get_node("vase_prefab")
	self.ids = {}
	self.id =nil
	make_new_character_pos()
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end
local root = vmath.vector3(840,104,0)

--vase
function make_new_vase_pos(id,pos,col)
	local c = gui.clone(prefab_vase)
	vase_ids[tostring(id)] = c
	gui.set_color(c, col)
	gui.set_position(c, position_to_map(pos))
end

function delete_vase_pos(id)
	local node= vase_ids[tostring(id)]
	gui.delete_node(node)
end
--enemy
function make_new_character_pos(id)
	local c = gui.clone(prefab_character)
	local pos =gui.get_position(prefab_character)
	root = pos
	-- pos.x = pos.x+10
	gui.set_position(c,pos)
	-- self.ids.id = c
	ids[tostring(id)] = c
end

function change_character_pos_col(id,pos,color)
	local move = ids[tostring(id)]
	gui.set_position(move, position_to_map(pos))
	gui.set_color(move, color)

	-- print(table.concat(ids)," ")
end

function position_to_map(pos)
	return root+pos/20
end

function delete_character_pos(id)
	local move = ids[tostring(id)]
	gui.delete_node(move)
	-- table.remove(ids,tostring(id))
end

local msg_map_position = hash("msg_map_position")
local msg_init_map_position = hash("msg_init_map_position")
local msg_end_map_position = hash("msg_end_map_position")
local msg_init_vase_position = hash("msg_init_vase_position")
local msg_end_vase_position = hash("msg_end_vase_position")
function on_message(self, message_id, message, sender)
	if message_id == msg_init_map_position then
		make_new_character_pos(sender)
	elseif message_id == msg_map_position then
		change_character_pos_col(sender,message.pos,message.color)

	elseif message_id == msg_end_map_position then
		delete_character_pos(sender)
	elseif message_id == msg_init_vase_position then
		make_new_vase_pos(sender,message.pos,message.color)
	elseif message_id == msg_end_vase_position then
		delete_vase_pos(sender)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
