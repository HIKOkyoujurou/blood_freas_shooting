go.property("color", vmath.vector4())
local tank = 30
local pow =40
function init(self)
	self.color =  vmath.vector4(math.random(),math.random(),math.random(),1)
	sprite.set_constant("#sprite", "tint", self.color)
	msg.post("/ui#level","msg_init_vase_position",{pos =go.get_position() ,color =self.color})
end

function final(self)
	msg.post("/ui#level","msg_end_vase_position")	
	msg.post("/level_manager#manager","msg_break_vase")

end

function update(self, dt)
	
end

function break_vase(self)
	dir = vmath.vector3(math.random(-0.9, 0.9), math.random(-0.9, 0.9), 0)
	splashes_vase(6,self,tank,pow,dir)
	go.delete(".")
end

function splashes_vase(num,self,size,power,dir)
	local size_tbl = {}
	local normal_amount = size/(num+1)
	local random_amount = normal_amount

	for i = 1,num do
		local s =normal_amount
		if i ~= num then
			part = math.random(0,random_amount)
			s= s+part

			random_amount = random_amount-part
		else
			s =s+random_amount
		end
		table.insert(size_tbl,i,s)
	end


	for i = 1,#size_tbl do

		local rnd_dir = math.random(-math.pi,math.pi)--math.atan2(dir.y,dir.x)+math.pi*(i-num/2)/(2*num)
		-- print("rnd_dir:"..rnd_dir)
		local dir_temp = vmath.vector3(1,1,0)
		dir_temp.x = math.cos(rnd_dir)
		dir_temp.y = math.sin(rnd_dir)
		-- print("splash size"..size_tbl[i])

		make_splash_vase(self,size_tbl[i],power,dir_temp)
	end
	print(dir)

end

function make_splash_vase(self,size,power,dir)

	local pos = go.get_position()

	local prop = {size = size*8,power= power,color = self.color,dir = dir}
	
	factory.create("#splash_factory", pos, nil, prop)

end

function on_message(self, message_id, message, sender)
	if message_id ==  hash("collision_response") then -- <2>

		if message.other_group == hash("actor")
		or message.other_group == hash("shot") then
			break_vase(self)

		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
