go.property("size", 1)
go.property("power",0)
go.property("color",vmath.vector4())
go.property("dir", vmath.vector3())
local spd = 10

function size_set(size)
	local r = 1.2*size/(128)
	local scale = vmath.vector3(r,r,1)
	
	go.set_scale(scale)
end

function init(self)
	size_set(self.size)
	sprite.set_constant("#sprite", "tint", self.color)
	self.move =true
	self.get = false
	self.parent = nil

end

function final(self)
	print("end_splash")
end

local friction = 0.8

function move(self)
	local pos = go.get_position()

	local vec =self.dir--vmath.vector3(math.cos(math.pi*self.dir/180), math.sin(math.pi*self.dir/180), 0)
	pos = pos+vec*self.power
	go.set_position(pos)
	self.power = self.power*friction
end

function update(self, dt)
	if self.power >0.01 and self.move then
		move(self)
	else
		self.move = false
	end

	if not self.get then
		self.size =self.size-dt*spd
		if self.size <1 then
			go.delete()
		else
			size_set(self.size)
		end
	end
end

function get_this_splash(self)
	msg.post(self.parent, "msg_get_splash", {size = self.size/2,col = self.color})
	go.delete()
end

function on_message(self, message_id, message, sender)
	if message_id ==  hash("collision_response") then -- <2>
		
		-- print("touch splash")
		-- print(message.other_group)

		if not self.get and
		not self.move and
		message.other_group == hash("actor")
		then
			go.set_parent(".",message.other_id,true)
			self.parent = message.other_id
			self.get = true
			self.move = false
			-- sprite.set_constant("#sprite", "tint", vmath.vector4(0,0,1,1))
			local pos = vmath.vector3(0,0,1)
			local time = 0.5
			go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_OUTCIRC, time, 0, get_this_splash)
			-- go.animate(".", "postion", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_OUTCIRC, 0.5, 0, get_this_splash)
			print("get_splash")
		end
	end

end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
